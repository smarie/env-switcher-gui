{
    "docs": [
        {
            "location": "/",
            "text": "envswitch\n\u00b6\n\n\n \n \n \n\n\nenvswitch\n provides a very simple GUI and CLI to easily switch between environments. \n\n\n\n\nA typical use case is when you sometimes work behind a network proxy and sometimes not: you have to often change the values of your \nhttp_proxy\n, \nhttps_proxy\n, \nno_proxy\n and \ncurl_ca_bundle\n environment variables as explained \nhere\n. \n\n\nenvswitch\n provides you with a very convenient way to remember \nsets of environment variables\n with associated values, and to apply a given set (so-called 'environment') at any time in a mouse click or a terminal command. \n\n\nIn addition, \nenvswitch\n allows users to save environment definition files as \n.yaml\n, so as to ease the process of sharing such files among developers.\n\n\nStandalone desktop app\n\u00b6\n\n\nInstall envswitch app\n\u00b6\n\n\nYou may install the envswitch app using the installers provided in the \nreleases\n page.\n\n\nLaunch envswitch app\n\u00b6\n\n\nOnce the standalone app is installed, you simply have to launch the executable file (\nenvswitch.exe\n on windows, \nenvswitch\n on linux). \n\n\nFor python developers: envswitch wheel\n\u00b6\n\n\nPrerequisite: install PyQt\n\u00b6\n\n\nIf you are using conda, it is recommended that you rely on \nconda\n to install \npyqt\n rather than on \npip\n:\n\n\n> conda install pyqt>\n=\n5\n.6\n\n\n\n\n\nActually the above is \nREALLY\n recommended on Anaconda, as using pip to install pyqt in anaconda root may compromise your global conda environment (see \nhere\n). \n\n\nIf you are not an Anaconda user then you have to manually install PyQt, since it is not included in the package dependencies in order to avoid the above to happen: \n\n\n> pip install pyqt5\n\n\n\n\n\nInstall envswitch wheel\n\u00b6\n\n\nThen,simply install as usual with pip:\n\n\n> pip install envswitch\n\n\n\n\n\nLaunch envswitch from terminal\n\u00b6\n\n\nenvswitch\n installs the following commandline entry points in your terminal:\n\n\n\n\nenvswitch_gui\n launches the GUI detached from the terminal\n\n\nenvswitch_gui_debug\n launches the GUI attached to the terminal. This allows to see the execution logs and potential error messages.\n\n\nenvswitch\n is the commandline entrypoint. Use \nenvswitch --help\n for details\n\n\n\n\nExample usage\n\u00b6\n\n\nConfiguration file\n\u00b6\n\n\nA \n.yml\n or \n.yaml\n configuration file is needed to use the tool. The format is really simple: it is a yaml file containing a list of named environments (\nenv_a\n and \nenv_b\n below), where each environment contains a list of environment variable names and values:\n\n\nenv_a\n:\n\n  \nname\n:\n \nHello\n\n  \nfoo\n:\n \n'hello'\n\n  \nbar\n:\n \n'world'\n\n\n\nenv_b\n:\n\n  \nname\n:\n \nGoodbye\n\n  \nfoo\n:\n \n'goodbye'\n\n  \nbar\n:\n \n'world'\n\n\n\n\n\n\nAn optional special variable named 'name', can be provided in order to customize the name of the environment in the GUI. Note that you can provide any number of environments, and they do not necessarily have to contain the same variables.\n\n\nHere is a \ntemplate file\n for network configuration, to switch between proxy and no proxy states (see \nhere\n for details).\n\n\nGUI\n\u00b6\n\n\nThe following screen capture shows the GUI loaded with a network proxy switching configuration file. \n\n\n\n\n\n\nTwo environments are defined: \"No proxy\" and \"Proxy\" \n\n\nThe user may select the one to apply by clicking on the corresponding tab, and by clicking on the 'Apply' button. This will set all of the defined environment variables to their displayed values.\n\n\n\n\nCLI\n\u00b6\n\n\nThe commandline version of envswitch provides an easy way to switch between environments. Instead of opening the GUI, clicking on the 'No proxy' tab and clicking on 'Apply', you may simply do it in the terminal:\n\n\n> envswitch no_proxy\n\n\n\n\n\nNote that by default the configuration file used will be the last one edited with the GUI. If you wish to use another one, simply specify it with the \n-f\n option:\n\n\n> envswitch -f other_config.yml other_env_id\n\n\n\n\n\nSee Also\n\u00b6\n\n\nInspiring references:\n\n\n\n\nPython desktop apps Overview: http://takluyver.github.io/posts/so-you-want-to-write-a-desktop-app-in-python.html\n\n\nPyQt and Qt designer: https://nikolak.com/pyqt-qt-designer-getting-started/\n\n\nPyQt Main Window example: \n\n\nResources in Qt: https://stackoverflow.com/questions/36673900/importing-resource-file-to-pyqt-code\n\n\nExample project with tray icon: https://github.com/dglent/meteo-qt\n\n\nMVC with PyQt: \n\n\nhttps://stackoverflow.com/questions/1660474/pyqt-and-mvc-pattern\n\n\n(in french) https://openclassrooms.com/courses/programmez-avec-le-langage-c/l-architecture-mvc-avec-les-widgets-complexes\n\n\n\n\n\n\n\n\nAlternatives to PyQt: \n\n \nEnaml\n\n\n \nwxPython\n\n\nAlternatives to cx_Freeze:\n* \npyinstaller\n, with this \ntutorial\n\n\nDo you like this project ? You might also like \nthese\n \n\n\nWant to contribute ?\n\u00b6\n\n\nDetails on the github page: \nhttps://github.com/smarie/env-switcher-gui",
            "title": "Home"
        },
        {
            "location": "/#envswitch",
            "text": "envswitch  provides a very simple GUI and CLI to easily switch between environments.    A typical use case is when you sometimes work behind a network proxy and sometimes not: you have to often change the values of your  http_proxy ,  https_proxy ,  no_proxy  and  curl_ca_bundle  environment variables as explained  here .   envswitch  provides you with a very convenient way to remember  sets of environment variables  with associated values, and to apply a given set (so-called 'environment') at any time in a mouse click or a terminal command.   In addition,  envswitch  allows users to save environment definition files as  .yaml , so as to ease the process of sharing such files among developers.",
            "title": "envswitch"
        },
        {
            "location": "/#standalone-desktop-app",
            "text": "",
            "title": "Standalone desktop app"
        },
        {
            "location": "/#install-envswitch-app",
            "text": "You may install the envswitch app using the installers provided in the  releases  page.",
            "title": "Install envswitch app"
        },
        {
            "location": "/#launch-envswitch-app",
            "text": "Once the standalone app is installed, you simply have to launch the executable file ( envswitch.exe  on windows,  envswitch  on linux).",
            "title": "Launch envswitch app"
        },
        {
            "location": "/#for-python-developers-envswitch-wheel",
            "text": "",
            "title": "For python developers: envswitch wheel"
        },
        {
            "location": "/#prerequisite-install-pyqt",
            "text": "If you are using conda, it is recommended that you rely on  conda  to install  pyqt  rather than on  pip :  > conda install pyqt> = 5 .6  Actually the above is  REALLY  recommended on Anaconda, as using pip to install pyqt in anaconda root may compromise your global conda environment (see  here ).   If you are not an Anaconda user then you have to manually install PyQt, since it is not included in the package dependencies in order to avoid the above to happen:   > pip install pyqt5",
            "title": "Prerequisite: install PyQt"
        },
        {
            "location": "/#install-envswitch-wheel",
            "text": "Then,simply install as usual with pip:  > pip install envswitch",
            "title": "Install envswitch wheel"
        },
        {
            "location": "/#launch-envswitch-from-terminal",
            "text": "envswitch  installs the following commandline entry points in your terminal:   envswitch_gui  launches the GUI detached from the terminal  envswitch_gui_debug  launches the GUI attached to the terminal. This allows to see the execution logs and potential error messages.  envswitch  is the commandline entrypoint. Use  envswitch --help  for details",
            "title": "Launch envswitch from terminal"
        },
        {
            "location": "/#example-usage",
            "text": "",
            "title": "Example usage"
        },
        {
            "location": "/#configuration-file",
            "text": "A  .yml  or  .yaml  configuration file is needed to use the tool. The format is really simple: it is a yaml file containing a list of named environments ( env_a  and  env_b  below), where each environment contains a list of environment variable names and values:  env_a : \n   name :   Hello \n   foo :   'hello' \n   bar :   'world'  env_b : \n   name :   Goodbye \n   foo :   'goodbye' \n   bar :   'world'   An optional special variable named 'name', can be provided in order to customize the name of the environment in the GUI. Note that you can provide any number of environments, and they do not necessarily have to contain the same variables.  Here is a  template file  for network configuration, to switch between proxy and no proxy states (see  here  for details).",
            "title": "Configuration file"
        },
        {
            "location": "/#gui",
            "text": "The following screen capture shows the GUI loaded with a network proxy switching configuration file.     Two environments are defined: \"No proxy\" and \"Proxy\"   The user may select the one to apply by clicking on the corresponding tab, and by clicking on the 'Apply' button. This will set all of the defined environment variables to their displayed values.",
            "title": "GUI"
        },
        {
            "location": "/#cli",
            "text": "The commandline version of envswitch provides an easy way to switch between environments. Instead of opening the GUI, clicking on the 'No proxy' tab and clicking on 'Apply', you may simply do it in the terminal:  > envswitch no_proxy  Note that by default the configuration file used will be the last one edited with the GUI. If you wish to use another one, simply specify it with the  -f  option:  > envswitch -f other_config.yml other_env_id",
            "title": "CLI"
        },
        {
            "location": "/#see-also",
            "text": "Inspiring references:   Python desktop apps Overview: http://takluyver.github.io/posts/so-you-want-to-write-a-desktop-app-in-python.html  PyQt and Qt designer: https://nikolak.com/pyqt-qt-designer-getting-started/  PyQt Main Window example:   Resources in Qt: https://stackoverflow.com/questions/36673900/importing-resource-file-to-pyqt-code  Example project with tray icon: https://github.com/dglent/meteo-qt  MVC with PyQt:   https://stackoverflow.com/questions/1660474/pyqt-and-mvc-pattern  (in french) https://openclassrooms.com/courses/programmez-avec-le-langage-c/l-architecture-mvc-avec-les-widgets-complexes     Alternatives to PyQt:    Enaml    wxPython  Alternatives to cx_Freeze:\n*  pyinstaller , with this  tutorial  Do you like this project ? You might also like  these",
            "title": "See Also"
        },
        {
            "location": "/#want-to-contribute",
            "text": "Details on the github page:  https://github.com/smarie/env-switcher-gui",
            "title": "Want to contribute ?"
        },
        {
            "location": "/changelog/",
            "text": "1.2.0 - New packaging for releases\n\u00b6\n\n\n\n\nReducing the size of generated distribution on windows and on linux (but on linux it is still quite large as it includes libicudata.so.58, help would be needed to remove this dependency).\n\n\nAdded licenses for PyQt and Qt\n\n\nNow releasing a .tar.gz 'executable' release for linux distributions, and removed the old .tar.gz 'source' file release that was redundant with the github-generated one\n\n\nFixed documentation to include a valid template\n\n\n\n\n1.1.0 - Attempt to fix a ghost reference in PyPi 1.0.12\n\u00b6\n\n\n1.0.1 - First version with automatic release for Windows 32/64 and PyPi\n\u00b6\n\n\n\n\nAppveyor now deploys the .msi release\n\n\nTravis builds the doc and deploys the wheel on PyPi\n\n\nProject page contains appropriate documentation to get started\n\n\n\n\n1.0.0 - First public working version of envswitcher\n\u00b6",
            "title": "Changelog"
        },
        {
            "location": "/changelog/#120-new-packaging-for-releases",
            "text": "Reducing the size of generated distribution on windows and on linux (but on linux it is still quite large as it includes libicudata.so.58, help would be needed to remove this dependency).  Added licenses for PyQt and Qt  Now releasing a .tar.gz 'executable' release for linux distributions, and removed the old .tar.gz 'source' file release that was redundant with the github-generated one  Fixed documentation to include a valid template",
            "title": "1.2.0 - New packaging for releases"
        },
        {
            "location": "/changelog/#110-attempt-to-fix-a-ghost-reference-in-pypi-1012",
            "text": "",
            "title": "1.1.0 - Attempt to fix a ghost reference in PyPi 1.0.12"
        },
        {
            "location": "/changelog/#101-first-version-with-automatic-release-for-windows-3264-and-pypi",
            "text": "Appveyor now deploys the .msi release  Travis builds the doc and deploys the wheel on PyPi  Project page contains appropriate documentation to get started",
            "title": "1.0.1 - First version with automatic release for Windows 32/64 and PyPi"
        },
        {
            "location": "/changelog/#100-first-public-working-version-of-envswitcher",
            "text": "",
            "title": "1.0.0 - First public working version of envswitcher"
        }
    ]
}